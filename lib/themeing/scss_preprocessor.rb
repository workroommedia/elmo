# frozen_string_literal: true

module Themeing
  # Preprocesses application.scss to create combinations for themes and LTR/RTL
  class ScssPreprocessor
    include PathHelpers

    def run
      clear_current_preprocessed_scss
      %w[nemo elmo custom].each do |theme|
        next unless File.exist?(theme_scss_dir.join("_#{theme}_theme.scss"))
        %w[ltr rtl].each do |direction|
          create_file_for(theme, direction)
        end
      end
    end

    private

    def clear_current_preprocessed_scss
      puts "Removing old preprocessed files" unless Rails.env.test?
      Dir.glob(styles_dir.join("application_*.scss")) { |f| File.delete(f) }
    end

    def create_file_for(theme, direction)
      filename = "application_#{theme}_#{direction}.scss"
      puts "Writing #{filename}" unless Rails.env.test?
      File.open(styles_dir.join(filename), "w") do |f|
        out = original_scss.gsub("@@@theme@@@", "#{theme}_theme").gsub!("@@@direction@@@", direction)
        f.write(out)
      end
    end

    def original_scss
      @original_scss ||= replace_top_comment(File.read(app_scss_file))
    end

    def replace_top_comment(scss)
      lines = scss.split("\n")
      loop { lines[0].match?(%r{\A(//|\w*\z)}) ? lines.shift : break }
      +"// THIS FILE IS AUTO-GENERATED BY rake scss:preprocess. DO NOT EDIT DIRECTLY!\n\n" <<
        lines.join("\n")
    end

    def app_scss_file
      styles_dir.join("application.template.scss")
    end
  end
end
